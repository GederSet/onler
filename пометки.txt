1. Если хочешь создать темную тему, то сделай картинки в png а не jpg, потому что на темном фоне у картинок с товаром фон будет белый, а png будет всегда прозрачным.

2. Если надо разместить товары в каком-то особом порядке, например в красивом, то лечше заранее разместить их в нужном порядке в бд, а то придется отменять связи или удалять значения в других таблицах.

3. Переменные, хранящие в себе цвета, можно не разделять на группы, по типу "блоки" или "текст". Можно всё обобщить, по типу blackColor, whiteColor, redColor и т.д.

4. Создавай темную тему за счет переменных CSS, а не SCSS. Будет проще.

4. Для БЭМ блоков лучше создать отдельную папку, в которой будут подпапки для каждой страницы сайта. Там будут прописаны CSS стили для каждой страницы. 

5. Перед началом верстки страницы необходимо проанализировать элементы, которые станут БЭМ блоками. При верстке можно все сначала прописать в одном файле, но затем перенести стили в отдельный файл БЭМ блоков данной страницы. 
Также нужно осмотреть все страницы сайта, потому что может быть там тоже будут БЭМ блоки, которые находятся на нескольких страницах. В таком случае нужно взять с них то, что сходится, а отличия прописать отдельными классами.

6. В больших системах отчетливо начинают проявлять себя ошибки, допущенные в маленьких проектах. В маленьких системах написанный код может не проявлять проблем, но есть применять те же подходы по написанию кода в больших системах, то недостатки станут сразу заметны. 
Отчетливое видение этих проблем на больших проектах мотивирует исправлять их и закреплять усвоенные уроки при создании маленьких проектов, которые идеально подходят для исправления своих недостатков, допущенных в больших системах, и формирования полезных привычек. Например не писать весь JS код в одном файле, а разбивать его на папки, из которых нужные функции потом будут экспортироваться в другие файлы. Или Создание отдельных папок для BEM блоков в CSS.

7. Если нужно сослаться на какой-то блок, то прописывай ему индентификатор с помощью котрого будет происходить поиск, а не класс. Пускай класс будет служить только для стилизации.

8. Хеширование паролей. В формах входа и регистрации нужно создавать поле, содержащее уникальное значение о пользователе, такое же уникальное, как и его пароль. Если задумано, что в системе будут храниться имена пользователей, то в форму входа и регистрации помимо пароля и имени нужно добавить ещё одно поле, которое будет содержать уникальное значение, например login, email или что-то еще. Если же имя не предусмотрено, тогда можно просто использовать поле login. Дело в том, что пароли в БД нужно хешировать, поскольку если она достанется другим людям, то они будут знать пароли пользователей, поэтому такой пароль, как qwerty, нужно визуально изменить на рандомный набор символов, например такой: klsdajflsjdfojwafaskdljf. Для того, что бы хеширование было качественным, необходимо использовать хеширование со сложным алгоритмом. Хеширование сложного и простого алгоритма отличается тем, что простой алгоритм всегда переводит строку в одну и туже последовательность символов, например qwerty всегда будет чем-то таким: asldjfal. Однако если использовать сложный алгоритм, то эта строка всегда будет разной и никто не сможет при желании перевести эту строку "обратно". Однако, в таком случае придется сравнивать захешированный парольи незахешированный пароль, то есть придется доставать захешированный пароль из БД. А сделать это можно будет только с помощью уникального значения, например login или email, который мы должны прописать в форме входа и регистрации. Поэтому лучше заранее прописывать в форме login, а не имя, поскольку имена не уникальны